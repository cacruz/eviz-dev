# Available options:
# Note: in all cases where contour levels are specified, enter [] to let eviz compute levels
fieldname:
    unitconversion: 1  # used to convert data units
    units: days  # some data do not contain units metadata, if so specify here
    diff_percd: [-500., -50., -10., -5., -0.5, 0.5, 5., 10., 50., 500.]   # % diff range
    diff_percc: [-500., -50., -10., -5., -0.5, 0.5, 5., 10., 50., 500.]   # % change range
    diff_ratio: [.5,.6,.7,.8,.9,1.0,1.1,1.2,1.3,1.4,1.5]   # ratio diff range
    
    xyplot:
        time_lev: 1  # select time level
        line_contours: true  # will apply line contours on top of filled contours
        cmap: jet   # select from matplotlib
        grid: yes   # plot grid (default is no)
        cscale: log # colorbar scale, linear(default), log
        tave: yes  # averages over all time
        zave: yes  # averages over all vertical levels (computes column average)
        zsum: yes  # adds over all vertical levels (computes total column )
        extent: [lonW, lonE, latS, latN]  # or conus
        projection: # (default: Plate Carree) [lambert, albers, ortho, stereo, polar]
        fill_value:  -9.99999917e+33  # optional entry (xyplot only)
        levels: # always assumed in hPa (mb), the list contains the contour levels to plot
            # Levels HAVE to be specified! But diff_ levels are not!
            # For 2D field, the level is 0
            # Contour levels are optional. Useful when field range values are unknown. In this case, add empty list.
            0: [] # Let eviz determine contour levels for you
            # For 3D fields specify levels in hPa (mb)
            10: []  # Let eviz determine contour levels for you
            50: [0.0, 400.0, 500.0, 600.0, 1000.0, 1200.0, 1400.0, 1600.0, 1800.0]
            500: [0.0, 5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 50.0, 55.0, 60.0]
            # Add prefix "diff_" to specify contour levels for a "difference" field
        diff_10: [] # Let eviz determine contour levels for you
        diff_50: [-800.0, -400.0, -200.0, -100.0, -10.0, -1.0, 0.0, 1.0, 10.0, 100.0, 200.0, 400.0, 800.0]
        diff_500: [-10.0, -8.0, -6.0, -4.0, -2.0, -1.0, 0.0, 1.0, 2.0, 4.0, 6.0, 8.0, 10.0]
        # The following can also be used in yz plots
        cmap_set_over: white  # matplotlib color for over-range values
        cmap_set_under: white  # matplotlib color for under-range values
        # The following can also be used in all plot types that use a colorbar
        cbar_sci_notation: True  # use scientific notation for colorbar values (useful for small/large numbers)
        # The following can also be used in all plot types
        custom_title: Custom Title # Additional plot title to replace description (placed on top left)

    yzplot:
        time_lev: 1  # select time level
        line_contours: True  # will apply line contours on top of filled contours
        tave: yes
        profile_dim: yc
        unit: unavailable_units # add units here if it is known that data does not provide one
        name: unavailable_name  # add name here if it is known that data does not provide one
        zrange: [1000, 1]  # must be in hPa
        zscale: log  # vertical axis scale: linear, log (default), custom
        cscale: log # colorbar scale, linear(default), log
        zorder: rev  # reverse ordering of vertical levels (default is do nothing)
        add_tropp_height: yes   #  add tropopause height line (default is True) - overrides app-level settings
        cmap: gnuplot   # select from matplotlib
        grid: yes   # plot grid (default is no)
        # Contour levels are OPTIONAL
        contours: [] # Let eviz determine contour levels for you
        diffcontours: [-100.0, -80.0, -60.0, -40.0, -20.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0]
        # if contours are unspecified (i.e., []) then num_clevs = 10, else specify here
        num_clevs: 20

    xtplot:   # time-series plot (averaged over space dims)
        line_contours: True  # will apply line contours on top of filled contours
        time_lev: all   # number of times to average (default is to use all), or specify range [tmin, tmax]
        grid: yes   # plot grid (default is no)
        # Average data over point, area, or time (year, season, month)
        mean_type: rolling  # point_sel, area_sel, year, season, month
        window_size: 10  # number of time steps to average over, used with mean_type=rolling
        point_sel: [0.5, 7.5]   # lon, lat, used with mean_type=point_sel
        area_sel: [-10.5, 10.5, 5, 25]  # lon1, lon2, lat1, lat2  # default delta = 0.5
        # Note: if year, season, month is selected, then average is over the specified time
        # If 3D data, select vertical level (in model units)
        level: 50000  # this level must exist in model levels
        add_trend: yes  # add a trend-line, default is no
        trend_polyfit: 1  # add a trend-line, default is no entry, eviz automatically creates a best fit

    txplot:   # hovmoller plot
        line_contours: True  # will apply line contours on top of filled contours
        time_lev: all  # default time=0, or specify range [tmin, tmax], or all
        grid: yes   # plot grid (default is no)
        # For global data, specify x- or y-range (in model units)
        xrange: [-25, 50]
        yrange: [0, 40]
        # Contour levels are OPTIONAL
        contours: [10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,28,30,32]
        space_dim: lat   # lat, lon, or lev
        torder: rev   # reverse time-axis ordering (default increases bottom-to-top)

    # A polar plot is treated as xy-plot over the poles: only the projection changes
    polarplot:   # polar plot, extent is fixed to [-180, 180, 60, 90]
        line_contours: True  # will apply line contours on top of filled contours
        name: Sea ice cover  # add name here if it is known that data does not provide one
        pole: south   # default: north
        grid: yes
        boundary: yes  # circular boundary
        cmap: BuPu
        levels:
            # Levels HAVE to be specified! But diff_ levels are not!
            1000: [6.0, 6.5, 6.6, 6.7, 6.8, 6.9, 7.0, 7.5, 8.0, 9.0, 10.0]
        diff_1000: [-10.0, -8.0, -6.0, -4.0, -2.0, 0.0, 2.0, 4.0, 6.0, 8.0, 10.0]

    # scatter plot: use for unstructured data
    scplot:
        grid: yes
        cmap: coolwarm
        extent: [lonW, lonE, latS, latN]  # or conus
        projection: # (default: Plate Carree) [lambert, albers, ortho, stereo, polar]

    # Box plot for summary statistics
    boxplot:
        time_lev: -1  # selec last experiment or specify "all" for a box-plot time series
        box_color: grey  # For single experiment. When there are multiple experiments, 
                         # this is overridden by "box_colors" in APP file



# You can also customize each plot by adding custom (valid) rcParams. For example, for field PM25
# specify a custom titlesize, font size, etc to be used in the scatter plot (scplot):
PM25:
    unitconversion: 1
    units: ppb
    scplot:
        # eviz-specific options described above
        cmap: BuPu
        extent: conus
        projection: lambert
        # rc_params are optional and matplotlib-specific. They can be used to customize the plot further.
        # These parameters will override the default matplotlib rcParams for this plot type.
        # Note: rcParams are a way to customize the appearance of matplotlib plots globally or locally
        # by setting various properties such as font size, line width, marker size, etc.
        # For valid entries, see reference_rcParams.txt in this directory.
        # For more information on rcParams, refer to the matplotlib documentation:
        # see https://matplotlib.org/stable/users/explain/customizing.html
        # Example rc_params for PM25 scatter plot
        rc_params:
            font.size: 12
            axes.titlesize: 16
            lines.markersize: 8
            scatter.marker: "."


