The diagram shows the main architectural patterns used in the project:

Factory Pattern: For creating appropriate model instances
Adapter Pattern: For configuration handling
Pipeline Pattern: For data processing

+------------------------------------------+
|                  Autoviz                 |
+------------------------------------------+
| - source_names: list                     |
| - args: Namespace                        |
| - model_info: dict                       |
| - model_name: str                        |
| - _config_manager: ConfigManager         |
| - factory_sources: list                  |
+------------------------------------------+
| + run()                                  |
| + set_data(input_files)                  |
| + set_output(output_dir)                 |
| - _check_input_files()                   |
+------------------------------------------+
                     |
                     | creates
                     v
+------------------------------------------+
|              ConfigManager               |
+------------------------------------------+
| - input_config: InputConfig              |
| - output_config: OutputConfig            |
| - system_config: SystemConfig            |
| - history_config: HistoryConfig          |
| - config: Config                         |
| - a_list: List[int]                      |
| - b_list: List[int]                      |
| - _findex: int                           |
| - _ds_index: int                         |
+------------------------------------------+
| + get_model_dim_name(dim_name)           |
| + setup_comparison()                     |
| + get_file_index(filename)               |
| + get_levels(to_plot, plot_type)         |
| + get_file_description(file)             |
| + get_file_exp_name(i)                   |
| + get_file_exp_id(i)                     |
+------------------------------------------+
                     |
                     | uses
                     v
+------------------------------------------+
|                  Config                  |
+------------------------------------------+
| - source_names: list                     |
| - app_data: dict                         |
| - spec_data: dict                        |
| - map_params: dict                       |
| - meta_coords: dict                      |
| - meta_attrs: dict                       |
| - species_db: dict                       |
+------------------------------------------+
| + input_config: InputConfig              |
| + output_config: OutputConfig            |
| + system_config: SystemConfig            |
| + history_config: HistoryConfig          |
+------------------------------------------+
                     |
                     | creates
                     v
+------------------------------------------+
|            ConfigurationAdapter          |
+------------------------------------------+
| - config_manager: ConfigManager          |
+------------------------------------------+
| + process_configuration()                |
| + close()                                |
+------------------------------------------+
                     |
                     | uses
                     v
+------------------------------------------+
|               DataPipeline               |
+------------------------------------------+
| - reader: DataReader                     |
| - processor: DataProcessor               |
| - transformer: DataTransformer           |
| - integrator: DataIntegrator             |
| - data_sources: dict                     |
| - dataset: xr.Dataset                    |
| - config_manager: ConfigManager          |
+------------------------------------------+
| + process_file(file_path, ...)           |
| + process_files(file_paths, ...)         |
| + integrate_data_sources(file_paths, ...)|
| + integrate_variables(variables, ...)    |
| + get_data_source(file_path)             |
| + get_all_data_sources()                 |
| + get_dataset()                          |
| + close()                                |
+------------------------------------------+
        |           |           |           |
        |           |           |           |
        v           v           v           v
+---------------+ +------------+ +------------+ +------------+
|  DataReader   | | DataProc.  | | DataTrans. | | DataInteg. |
+---------------+ +------------+ +------------+ +------------+
| + read_file() | | + process_ | | + transf._ | | + integr._ |
|               | |   data_src | |   data_src | |   data_src |
+---------------+ +------------+ +------------+ +------------+
        |
        | creates
        v
+------------------------------------------+
|               DataSource                 |
+------------------------------------------+
| - dataset: xr.Dataset                    |
| - metadata: dict                         |
+------------------------------------------+
| + get_variable(name)                     |
| + get_dimension(name)                    |
| + get_coordinates()                      |
+------------------------------------------+
                     |
                     | implements
                     v
+------------------------------------------+
|              AbstractRoot                |
+------------------------------------------+
| - config_manager: ConfigManager          |
+------------------------------------------+
| + logger: logging.Logger                 |
| + plot()                                 |
| + add_data_source(name, data_source)     |
| + get_data_source(name)                  |
| + load_data_sources(file_list)           |
+------------------------------------------+
                     |
                     | creates
                     v
+------------------------------------------+
|              RootFactory                 |
+------------------------------------------+
| - config_manager: ConfigManager          |
+------------------------------------------+
| + create_root_instance(config_manager)   |
+------------------------------------------+
        |
        | extends
        v
+------------------------------------------+
|        Concrete Factory Classes          |
+------------------------------------------+
| GriddedFactory, GeosFactory,             |
| WrfFactory, LisFactory, AirnowFactory,   |
| OmiFactory, MopittFactory, etc.          |
+------------------------------------------+
| + create_root_instance(config_manager)   |
+------------------------------------------+
        |
        | creates
        v
+------------------------------------------+
|           Model Classes                  |
+------------------------------------------+
| Gridded, Geos, Wrf, Lis, Airnow,         |
| Omi, Mopitt, Landsat, Fluxnet, etc.      |
+------------------------------------------+
| + plot()                                 |
| + add_data_source(name, data_source)     |
| + get_data_source(name)                  |
| + load_data_sources(file_list)           |
+------------------------------------------+
                     |
                     | uses
                     v
+------------------------------------------+
|                 Plotter                  |
+------------------------------------------+
| + simple_plot()                          |
| + plot_time_series_combined()            |
| + plot_composite_field()                 |
| + _plot_composite_xy()                   |
| + _plot_composite_yz()                   |
+------------------------------------------+
            ^           ^           ^
            |           |           |
            |           |           |
+----------------+ +------------+ +------------------+
|  SimplePlotter | |SinglePlotter| |ComparisonPlotter|
+----------------+ +------------+ +------------------+
| + simple_plot()| | + plot()   | | + plot()        |
| + plot()       | |            | |                 |
+----------------+ +------------+ +------------------+

Key Components and Relationships:

Autoviz: The main entry point for the visualization system. It orchestrates the entire process from configuration loading to data processing and visualization.

ConfigManager: Manages all configuration aspects, including input, output, system, and history configurations. It provides a unified interface to access configuration parameters.

DataPipeline: Orchestrates the data processing workflow with four main components:

DataReader: Loads data from various file formats
DataProcessor: Performs operations on loaded data
DataTransformer: Converts data between different representations
DataIntegrator: Combines data from multiple sources
AbstractRoot: Abstract base class for all data models, defining the interface for data handling and visualization.

RootFactory: Factory pattern implementation for creating appropriate model instances based on data source types.

Model Classes: Concrete implementations for different data sources (Gridded, Wrf, Lis, etc.) that handle specific data formats and visualization requirements.

DataSource: Represents a data source with its associated metadata and provides methods to access the data.

Plotter Module: Handles the actual plotting of data using different plot types (simple, time series, composite fields) and visualization approaches (single, comparison).