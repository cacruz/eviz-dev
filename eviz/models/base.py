from abc import ABC, abstractmethod
from dataclasses import dataclass
import logging

from eviz.lib.autoviz.config_manager import ConfigManager
from eviz.lib.data.sources import DataSource


@dataclass
class AbstractRoot(ABC):
    """This class defines an abstract base class for autoviz data sources.
        In eViz a `source` is a data file generated by an Earth system model (ESM),
        any other system that supports the ESM (e.g. a reanalysis system),
        or observational data sources from satellite or other inventories.
        Any class inheriting from AbstractRoot must adhere to the contract defined here.
        There are 2 required methods: logger() and plot()
        __post_init__ provides a default behavior for initialization

    Parameters
        config :
            Representation of the configuration used to specify data sources and
            user choices for the map generation. The config instance is created at the
            application level.
    """
    config_manager: ConfigManager

    @property
    @abstractmethod
    def logger(self) -> logging.Logger:
        """Abstract property for the logger instance."""
        pass

    @abstractmethod
    def plot(self):
        """Abstract method for the top-level plotting routine."""
        pass

    @abstractmethod
    def add_data_source(self, name: str, data_source: DataSource):
        """Add a data source to the model."""
        pass

    @abstractmethod
    def get_data_source(self, name: str) -> DataSource:
        """Retrieve a data source by name."""
        pass

    @abstractmethod
    def load_data_sources(self, file_list: list):
        """Load multiple data sources from a list of file paths."""
        pass

    def __post_init__(self):
        """Optional default behavior for initialization."""
        self.logger.info("Initializing AbstractRoot")
